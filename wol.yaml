substitutions:
  relay_gpio: "5"
  reset_gpio: "6"
  button_gpio: "4"
  reset_button_gpio: "7"
  wol_mac: "2c:fd:a1:c6:b6:94"

esphome:
  name: "wol-working"
  friendly_name: WOL

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

logger:

api:
  encryption:
    key: "yvcev/6JMtIA13Hul/AXtmgOimmyUhp5UdPaTAgdnUo="

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "Wol Fallback Hotspot"
    password: "a1MsWN520z5t"

captive_portal:

mdns:
  disabled: false
  services:
    - service: _esphomelib
      protocol: _tcp
      port: 6052
    - service: _http
      protocol: _tcp
      port: 6052

web_server:
  port: 6052

switch:
  - platform: gpio
    name: "PC Power Button"
    pin: ${relay_gpio}
    id: relay
    restore_mode: always_off
    on_turn_on:
      - delay: 500ms
      - switch.turn_off: relay

  - platform: gpio
    name: "PC Reset Button"
    pin: ${reset_gpio}
    id: reset_relay
    restore_mode: always_off
    on_turn_on:
      - delay: 500ms
      - switch.turn_off: reset_relay

binary_sensor:
  - platform: gpio
    name: "PC Physical Power Button"
    pin:
      number: ${button_gpio}
      mode: INPUT_PULLUP
      inverted: true
    on_press:
      then:
        - switch.turn_on: relay

  - platform: gpio
    name: "PC Physical Reset Button"
    pin:
      number: ${reset_button_gpio}
      mode: INPUT_PULLUP
      inverted: true
    on_press:
      then:
        - switch.turn_on: reset_relay

script:
  - id: wake_pc
    then:
      - lambda: |-
          uint8_t mac[6];
          sscanf("${wol_mac}", "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx", &mac[0], &mac[1], &mac[2], &mac[3], &mac[4], &mac[5]);
          uint8_t magicPacket[102];
          memset(magicPacket, 0xFF, 6);
          for (int i = 1; i <= 16; i++) {
            memcpy(&magicPacket[i * 6], mac, 6);
          }
          WiFiUDP udp;
          udp.beginPacket("255.255.255.255", 9);  // Send to broadcast address
          udp.write(magicPacket, sizeof(magicPacket));
          udp.endPacket();

button:
  - platform: template
    name: "Wake PC"
    on_press:
      then:
        - script.execute: wake_pc

  - platform: restart
    name: "Reboot ESP"

  - platform: template
    name: "Reboot PC"
    on_press:
      then:
        - switch.turn_on: reset_relay
